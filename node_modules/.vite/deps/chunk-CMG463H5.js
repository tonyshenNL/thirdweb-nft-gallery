import {
  fetchCurrencyValue
} from "./chunk-PDTS4OI3.js";
import {
  init_lib7 as init_lib
} from "./chunk-FSHZLPV2.js";
import {
  BigNumber,
  lib_exports8 as lib_exports
} from "./chunk-LXGF3WSV.js";
import {
  init_shim
} from "./chunk-DLIX7YGU.js";

// node_modules/@thirdweb-dev/sdk/dist/erc-20-history-43f00dd8.browser.esm.js
init_shim();
init_lib();
var TokenERC20History = class {
  constructor(contractWrapper, events) {
    this.contractWrapper = contractWrapper;
    this.events = events;
  }
  /**
   * Get all holder balances
   *
   * @remarks Lets you get all token holders and their corresponding balances
   * @returns - A JSON object of all token holders and their corresponding balances
   * @example
   * ```javascript
   * const allHolderBalances = await contract.history.getAllHolderBalances();
   * ```
   */
  async getAllHolderBalances() {
    const a = await this.events.getEvents("Transfer");
    const txns = a.map((b) => b.data);
    const balances = {};
    txns.forEach((item) => {
      const from = item == null ? void 0 : item.from;
      const to = item == null ? void 0 : item.to;
      const amount = item == null ? void 0 : item.value;
      if (!(from === lib_exports.AddressZero)) {
        if (!(from in balances)) {
          balances[from] = BigNumber.from(0);
        }
        balances[from] = balances[from].sub(amount);
      }
      if (!(to === lib_exports.AddressZero)) {
        if (!(to in balances)) {
          balances[to] = BigNumber.from(0);
        }
        balances[to] = balances[to].add(amount);
      }
    });
    return Promise.all(Object.keys(balances).map(async (addr) => ({
      holder: addr,
      balance: await fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.address, balances[addr])
    })));
  }
};

export {
  TokenERC20History
};
//# sourceMappingURL=chunk-CMG463H5.js.map
