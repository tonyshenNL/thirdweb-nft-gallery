import {
  InjectedConnector
} from "./chunk-4DBE6MMY.js";
import "./chunk-2E7BFCQK.js";
import {
  getInjectedPhantomProvider
} from "./chunk-W5MZI3DU.js";
import "./chunk-ELOBOROZ.js";
import {
  walletIds
} from "./chunk-LUVJIMOL.js";
import {
  ConnectorNotFoundError,
  ResourceUnavailableError,
  UserRejectedRequestError
} from "./chunk-L522MT4Y.js";
import "./chunk-3WUVUY2B.js";
import "./chunk-IH4C6MBP.js";
import {
  _classPrivateFieldGet,
  _classPrivateFieldInitSpec,
  _classPrivateFieldSet
} from "./chunk-DIF3NZXX.js";
import {
  _defineProperty
} from "./chunk-DJYJ43V7.js";
import "./chunk-F44DUYBV.js";
import "./chunk-LMS4WD7T.js";
import {
  init_lib7 as init_lib,
  utils_exports
} from "./chunk-FSHZLPV2.js";
import "./chunk-LXGF3WSV.js";
import "./chunk-HBS2L7KZ.js";
import "./chunk-JCGZRZHH.js";
import {
  init_shim
} from "./chunk-DLIX7YGU.js";
import "./chunk-EUIKE2YQ.js";

// node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.browser.esm.js
init_shim();
init_lib();
var _UNSTABLE_shimOnConnectSelectAccount = /* @__PURE__ */ new WeakMap();
var PhantomConnector = class extends InjectedConnector {
  constructor(arg) {
    const defaultOptions = {
      name: "Phantom",
      shimDisconnect: true,
      shimChainChangedDisconnect: true,
      getProvider: getInjectedPhantomProvider
    };
    const options = {
      ...defaultOptions,
      ...arg.options
    };
    super({
      chains: arg.chains,
      options,
      connectorStorage: arg.connectorStorage
    });
    _defineProperty(this, "id", walletIds.phantom);
    _classPrivateFieldInitSpec(this, _UNSTABLE_shimOnConnectSelectAccount, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);
  }
  /**
   * Connect to injected Phantom provider
   */
  async connect() {
    var _a, _b;
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    try {
      const provider = await this.getProvider();
      if (!provider) {
        throw new ConnectorNotFoundError();
      }
      this.setupListeners();
      this.emit("message", {
        type: "connecting"
      });
      let account = null;
      if (_classPrivateFieldGet(this, _UNSTABLE_shimOnConnectSelectAccount) && ((_a = this.options) == null ? void 0 : _a.shimDisconnect) && !Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))) {
        account = await this.getAccount().catch(() => null);
        const isConnected = !!account;
        if (isConnected) {
          try {
            await provider.request({
              method: "wallet_requestPermissions",
              params: [{
                eth_accounts: {}
              }]
            });
          } catch (error) {
            if (this.isUserRejectedRequestError(error)) {
              throw new UserRejectedRequestError(error);
            }
          }
        }
      }
      if (!account) {
        const accounts = await provider.request({
          method: "eth_requestAccounts"
        });
        account = utils_exports.getAddress(accounts[0]);
      }
      let connectedChainId = await this.getChainId();
      let isUnsupported = this.isChainUnsupported(connectedChainId);
      if (options.chainId && connectedChainId !== options.chainId) {
        try {
          await this.switchChain(options.chainId);
          connectedChainId = options.chainId;
          isUnsupported = this.isChainUnsupported(options.chainId);
        } catch (e) {
          console.error(`Could not switch to chain id : ${options.chainId}`, e);
        }
      }
      if ((_b = this.options) == null ? void 0 : _b.shimDisconnect) {
        await this.connectorStorage.setItem(this.shimDisconnectKey, "true");
      }
      const connectionInfo = {
        chain: {
          id: connectedChainId,
          unsupported: isUnsupported
        },
        provider,
        account
      };
      this.emit("connect", connectionInfo);
      return connectionInfo;
    } catch (error) {
      if (this.isUserRejectedRequestError(error)) {
        throw new UserRejectedRequestError(error);
      }
      if (error.code === -32002) {
        throw new ResourceUnavailableError(error);
      }
      throw error;
    }
  }
  async switchAccount() {
    const provider = await this.getProvider();
    await provider.request({
      method: "wallet_requestPermissions",
      params: [{
        eth_accounts: {}
      }]
    });
  }
};
export {
  PhantomConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-phantom.browser.esm-GPQ6HQPE.js.map
