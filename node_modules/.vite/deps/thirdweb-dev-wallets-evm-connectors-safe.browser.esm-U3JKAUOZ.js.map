{
  "version": 3,
  "sources": ["../../@thirdweb-dev/react-core/node_modules/@safe-global/safe-ethers-adapters/src/service.ts", "../../@thirdweb-dev/react-core/node_modules/@safe-global/safe-ethers-adapters/src/utils.ts", "../../@thirdweb-dev/react-core/node_modules/@safe-global/safe-ethers-adapters/src/signer.ts", "../../@thirdweb-dev/react-core/node_modules/@safe-global/safe-ethers-adapters/src/index.ts", "../../@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js"],
  "sourcesContent": [null, null, null, null, "import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { ethers } from 'ethers';\nimport { SafeService, SafeEthersSigner } from '@safe-global/safe-ethers-adapters';\nimport safeCoreSdk from '@safe-global/safe-core-sdk';\nimport safeEthersLib from '@safe-global/safe-ethers-lib';\nimport { C as CHAIN_ID_TO_GNOSIS_SERVER_URL } from '../../../../dist/constants-9cc70a7d.browser.esm.js';\nimport 'eventemitter3';\n\nconst CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS = {\n  // mainnet\n  1: \"0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2\",\n  // polygon\n  137: \"0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2\",\n  // bsc\n  56: \"0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2\",\n  // arbitrum\n  42161: \"0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2\",\n  // aurora\n  1313161554: \"0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2\",\n  // avalanche\n  43114: \"0x98FFBBF51bb33A056B08ddf711f289936AafF717\",\n  // optimism\n  10: \"0x98FFBBF51bb33A056B08ddf711f289936AafF717\",\n  // base goerli\n  84531: \"0x98FFBBF51bb33A056B08ddf711f289936AafF717\",\n  // celo\n  42220: \"0x98FFBBF51bb33A056B08ddf711f289936AafF717\",\n  // goerli\n  5: \"0x58FCe385Ed16beB4BCE49c8DF34c7d6975807520\",\n  // gnosis chain\n  100: \"0x58FCe385Ed16beB4BCE49c8DF34c7d6975807520\"\n};\nconst SIGN_MESSAGE_LIB_ABI = [{\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"bytes32\",\n    name: \"msgHash\",\n    type: \"bytes32\"\n  }],\n  name: \"SignMsg\",\n  type: \"event\"\n}, {\n  inputs: [{\n    internalType: \"bytes\",\n    name: \"message\",\n    type: \"bytes\"\n  }],\n  name: \"getMessageHash\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bytes\",\n    name: \"_data\",\n    type: \"bytes\"\n  }],\n  name: \"signMessage\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}];\nconst __IS_SERVER__ = \"object\" === \"undefined\";\nclass SafeConnector extends Connector {\n  // config\n\n  // private options: SafeOptions;\n\n  constructor() {\n    super();\n    _defineProperty(this, \"supportedChains\", SafeConnector.supportedChains);\n    _defineProperty(this, \"id\", \"safe-wallet\");\n    _defineProperty(this, \"ready\", !__IS_SERVER__);\n    _defineProperty(this, \"name\", \"Safe Wallet\");\n    {\n      this.ready = true;\n    }\n  }\n  async connect(args) {\n    if (!(args.chain.chainId in CHAIN_ID_TO_GNOSIS_SERVER_URL)) {\n      throw new Error(\"Chain not supported by Safe\");\n    }\n    this.safeSigner = await this.createSafeSigner(args);\n    return await this.getAddress();\n  }\n  async createSafeSigner(params) {\n    this.personalWallet = params.personalWallet;\n    const signer = await params.personalWallet.getSigner();\n    const safeAddress = params.safeAddress;\n    const safeChainId = params.chain.chainId;\n    if (!signer) {\n      throw new Error(\"cannot create Gnosis Safe signer without a personal signer\");\n    }\n    const signerChainId = await signer.getChainId();\n    if (signerChainId !== safeChainId) {\n      throw new Error(\"chainId of personal signer has to match safe chainId\");\n    }\n    if (!safeAddress) {\n      throw new Error(\"safeAddress is required\");\n    }\n    if (!safeChainId) {\n      throw new Error(\"safeChainId is required\");\n    }\n    const serverUrl = CHAIN_ID_TO_GNOSIS_SERVER_URL[safeChainId];\n    const signMessageLibAddress = CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS[safeChainId];\n    if (!serverUrl || !signMessageLibAddress) {\n      throw new Error(\"Chain not supported\");\n    }\n    const ethAdapter = new safeEthersLib({\n      ethers,\n      signerOrProvider: signer\n    });\n    const safe = await safeCoreSdk.create({\n      ethAdapter: ethAdapter,\n      safeAddress\n    });\n    const service = new SafeService(serverUrl);\n    const safeSigner = new SafeEthersSigner(safe, service, signer.provider);\n    safeSigner.signMessage = async message => {\n      // Encode the request to the signMessage function of the SafeMessageLib\n      const contract = new ethers.BaseContract(signMessageLibAddress, SIGN_MESSAGE_LIB_ABI);\n      const data = contract.interface.encodeFunctionData(\"signMessage\", [ethers.utils.hashMessage(message)]);\n      const to = signMessageLibAddress;\n      const value = \"0\";\n      const operation = 1; // 1 indicates a delegatecall\n      const safeTxGas = 50000;\n      const baseGas = 50000;\n      const gasPrice = 0;\n      const gasToken = ethers.constants.AddressZero;\n      const refundReceiver = ethers.constants.AddressZero;\n\n      // Create the safe transaction to approve the signature\n      const safeTx = await safe.createTransaction({\n        safeTransactionData: {\n          to,\n          value,\n          operation,\n          data,\n          baseGas,\n          safeTxGas,\n          gasPrice,\n          gasToken,\n          refundReceiver\n        }\n      });\n\n      // Sign and propose the safe transaction\n      const safeTxHash = await safe.getTransactionHash(safeTx);\n      const safeSignature = await safe.signTransactionHash(safeTxHash);\n      await service.proposeTx(safe.getAddress(), safeTxHash, safeTx, safeSignature);\n\n      // Poll while we wait for the safe transaction to reach minimum confirmations\n      while (true) {\n        try {\n          const txDetails = await service.getSafeTxDetails(safeTxHash);\n          if (txDetails.transactionHash) {\n            await signer.provider?.waitForTransaction(txDetails.transactionHash);\n            break;\n          }\n        } catch (e) {}\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      }\n\n      // For on-chain signatures, safe expects just \"0x\" as the signature\n      return \"0x\";\n    };\n\n    // set the personal signer as \"previous connector\" so that we can re-connect to it later when disconnecting\n    this.previousConnector = params.personalWallet;\n    return safeSigner;\n  }\n  async disconnect() {\n    this.safeSigner = undefined;\n    this.previousConnector = undefined;\n    return undefined;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return await signer.getAddress();\n  }\n  async getChainId() {\n    return (await this.getSigner()).getChainId();\n  }\n  async getProvider() {\n    const provider = (await this.getSigner()).provider;\n    if (!provider) {\n      throw new Error(\"No provider available\");\n    }\n    return provider;\n  }\n  async getSigner() {\n    if (!this.safeSigner) {\n      throw new Error(\"not connected - please call connect() first\");\n    }\n    return this.safeSigner;\n  }\n  async isConnected() {\n    try {\n      const account = await this.getAddress();\n      return !!account;\n    } catch (e) {\n      return false;\n    }\n  }\n  onAccountsChanged(accounts) {\n    if (accounts.length === 0) {\n      this.emit(\"disconnect\");\n    } else {\n      if (accounts[0]) {\n        this.emit(\"change\", {\n          account: ethers.utils.getAddress(accounts[0])\n        });\n      }\n    }\n  }\n  onDisconnect() {\n    this.emit(\"disconnect\");\n  }\n  switchChain() {\n    throw new Error(\"Safe connector does not support switching chains\");\n  }\n  updateChains() {}\n  async setupListeners() {}\n}\n_defineProperty(SafeConnector, \"supportedChains\", /* @__PURE__ */Object.keys(CHAIN_ID_TO_GNOSIS_SERVER_URL));\n\nexport { SafeConnector };\n"],
  "mappings": "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",
  "names": ["SafeService", "SafeEthersSigner", "init_lib", "safeEthersLib", "safeCoreSdk"]
}
