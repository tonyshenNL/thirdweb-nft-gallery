import stdLibBrowser from 'node-stdlib-browser';
import type { Plugin } from 'vite';
export declare type ModuleName = keyof typeof stdLibBrowser;
export declare type ModuleNameWithoutNodePrefix<T = ModuleName> = T extends `node:${infer P}` ? P : never;
interface PolyfillOptions {
    /**
     * @example
     *
     * ```ts
     * nodePolyfills({
     *   exclude: ['fs', 'path']
     * })
     * ```
     */
    exclude: ModuleNameWithoutNodePrefix[];
    /**
     * @default true
     */
    protocolImports: boolean;
}
/**
 * Returns a Vite plugin to polyfill Node's Core Modules for browser environments. Supports `node:` protocol imports.
 *
 * @example
 *
 * ```ts
 * // vite.config.ts
 * import { defineConfig } from 'vite'
 * import { nodePolyfills } from 'vite-plugin-node-polyfills'
 *
 * export default defineConfig({
 *   plugins: [
 *     nodePolyfills({
 *       // Specific modules that should not be polyfilled.
 *       exclude: [],
 *       // Whether to polyfill `node:` protocol imports.
 *       protocolImports: true,
 *     }),
 *   ],
 * })
 * ```
 */
export declare const nodePolyfills: (options?: Partial<PolyfillOptions>) => Plugin;
export {};
