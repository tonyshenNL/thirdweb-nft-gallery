import { createRequire as c } from "node:module";
import f from "@rollup/plugin-inject";
import a from "node-stdlib-browser";
import { handleCircularDependancyWarning as m } from "node-stdlib-browser/helpers/rollup/plugin";
import d from "node-stdlib-browser/helpers/esbuild/plugin";
const g = (s) => s.startsWith("node:"), P = (s = {}) => {
  const r = c(import.meta.url).resolve("node-stdlib-browser/helpers/esbuild/shim"), n = {
    exclude: [],
    protocolImports: !0,
    ...s
  }, u = (t) => n.exclude.some((l) => t === l || t === `node:${l}`);
  return {
    name: "vite-plugin-node-polyfills",
    config: (t, l) => {
      const p = Object.entries(a).reduce((e, [o, i]) => (!n.protocolImports && g(o) || u(o) || (e[o] = i), e), {});
      return {
        build: {
          rollupOptions: {
            onwarn: (e, o) => {
              m(e, o);
            },
            plugins: [
              {
                ...f({
                  global: [r, "global"],
                  process: [r, "process"],
                  Buffer: [r, "Buffer"]
                })
              }
            ]
          }
        },
        optimizeDeps: {
          esbuildOptions: {
            define: {
              Buffer: "Buffer",
              global: "global",
              process: "process"
            },
            inject: [
              r
            ],
            plugins: [
              d(p),
              {
                name: "vite-plugin-node-polyfills-shims-resolver",
                setup(e) {
                  const o = r.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), i = new RegExp(`^${o}$`);
                  e.onResolve({ filter: i }, () => ({
                    external: !1,
                    path: r
                  }));
                }
              }
            ]
          }
        },
        resolve: {
          alias: {
            ...p
          }
        }
      };
    }
  };
};
export {
  P as nodePolyfills
};
//# sourceMappingURL=index.js.map
